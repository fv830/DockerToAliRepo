name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Build and push image Aliyun
      run: |
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
        
        # 数据预处理,判断镜像是否重名
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            # 分离平台参数和镜像名称
            platform=""
            image=""
            
            # 检查是否包含 --platform 参数
            if echo "$line" | grep -q -- "--platform"; then
                # 提取平台参数
                platform=$(echo "$line" | grep -o -- "--platform[ =][^ ]*" | sed 's/--platform[ =]//')
                # 提取镜像名称（移除平台参数）
                image=$(echo "$line" | sed 's/--platform[ =][^ ]*//' | xargs)
            else
                # 如果没有平台参数，整行都是镜像名称
                image="$line"
            fi
            
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image="${image%%@*}"
            echo "image $image"
            # 获取镜像名:版本号  例如nginx:1.25.3
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            echo "image_name_tag $image_name_tag"
            # 获取命名空间 例如kasmweb,  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            echo "name_space: $name_space"
            # 这里不要是空值影响判断
            name_space="${name_space}_"
            # 获取镜像名例如nginx
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            echo "image_name: $image_name"
            
            # 如果镜像存在于数组中，则添加temp_map
            if [[ -n "${temp_map[$image_name]}" ]]; then
                 # 如果temp_map已经存在镜像名，判断是不是同一命名空间
                 if [[ "${temp_map[$image_name]}" != $name_space  ]]; then
                    echo "duplicate image name: $image_name"
                    duplicate_images[$image_name]="true"
                 fi
            else
                # 存镜像的命名空间
                temp_map[$image_name]=$name_space
            fi       
        done < images.txt
        
        
        while IFS= read -r line; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            echo "Processing line: $line"
            
            # 分离平台参数和镜像名称
            platform=""
            image=""
            original_line="$line"
            
            # 检查是否包含 --platform 参数
            if echo "$line" | grep -q -- "--platform"; then
                # 提取平台参数
                platform=$(echo "$line" | grep -o -- "--platform[ =][^ ]*" | sed 's/--platform[ =]//')
                # 提取镜像名称（移除平台参数）
                image=$(echo "$line" | sed 's/--platform[ =][^ ]*//' | xargs)
            else
                # 如果没有平台参数，整行都是镜像名称
                image="$line"
            fi
        
            echo "docker pull $original_line"
            docker pull $original_line
            
            echo "platform is: $platform"
            # 如果存在架构信息 将架构信息拼到镜像名称前面
            if [ -z "$platform" ]; then
                platform_prefix=""
            else
                # 清理平台参数，只保留架构部分（如 arm64, amd64 等）
                platform_clean=$(echo "$platform" | sed 's/linux\///' | tr '/' '_')
                platform_prefix="${platform_clean}_"
            fi
            echo "platform_prefix is: $platform_prefix"
            
            # 将@sha256:等字符删除
            image="${image%%@*}"
            echo "image after processing: $image"
            
            # 获取 镜像名:版本号  例如nginx:1.25.3
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            # 获取命名空间 例如kasmweb  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            # 获取镜像名例  例如nginx
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
        
            name_space_prefix=""
            # 如果镜像名重名
            if [[ -n "${duplicate_images[$image_name]}" ]]; then
               #如果命名空间非空，将命名空间加到前缀
               if [[ -n "${name_space}" ]]; then
                  name_space_prefix="${name_space}_"
               fi
            fi
            
            # 构建新的镜像名称
            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${platform_prefix}${name_space_prefix}${image_name_tag}"
            echo "New image name: $new_image"
            
            echo "docker tag $image $new_image"
            docker tag $image $new_image
            echo "docker push $new_image"
            docker push $new_image
            
            # 清理中间镜像
            echo "docker rmi $image $new_image"
            docker rmi $image $new_image 2>/dev/null || true
            
        done < images.txt
